/*
 * GPUGaussianMoveGenerator.h
 *
 *  Created on: 26 sie 2019
 *      Author: pkua
 */

#ifndef GPUGAUSSIANMOVEGENERATOR_H_
#define GPUGAUSSIANMOVEGENERATOR_H_


#include <curand_kernel.h>

#include "simulation/MoveGenerator.h"

/**
 * @brief A `__device__` class generating moves on CPU according to normal distribution in radius and uniform
 * distribution in angle.
 */
class GPUGaussianMoveGenerator : public MoveGenerator {
private:
    float sigma;
    curandState *states;
    size_t numberOfTrajectories;

public:
    /**
     * @brief Initializes the generators using seeds generated by byte generator seeded with @a seed parameter
     *
     * The constructor is expected to be called only by the first CUDA thread.
     *
     * @param sigma the standard deviation in normal distribution
     * @param integrationStep the integration step in the diffusion used to rescale the distribution properly - in
     * this case by square root of the integration step
     * @param seed the random seed for generators
     * @param numberOfTrajectories the number of trajectories for which independent number will be sampled on GPU
     */
    CUDA_DEV GPUGaussianMoveGenerator(float sigma, float integrationStep, unsigned int seed,
                                      size_t numberOfTrajectories);

    CUDA_DEV GPUGaussianMoveGenerator(const GPUGaussianMoveGenerator &other) = delete;
    CUDA_DEV GPUGaussianMoveGenerator operator=(GPUGaussianMoveGenerator other) = delete;

    /**
     * @brief The destructor which is expected to be called only in the first CUDA thread.
     */
    CUDA_DEV ~GPUGaussianMoveGenerator();

    /**
     * @brief Generates random move on CPU according to normal distribution in radius and uniform distribution in angle.
     *
     * It respects the id of CUDA thread and for each thread the sequences are independent.
     *
     * @return random move according to Cauchy distribution in radius and uniform distribution in angle
     */
    CUDA_DEV Move generateMove() override;
};

#endif /* GPUGAUSSIANMOVEGENERATOR_H_ */
