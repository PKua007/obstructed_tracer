/*
 * CauchyMoveGenerator.h
 *
 *  Created on: 29 lip 2019
 *      Author: pkua
 */

#ifndef CAUCHYMOVEGENERATOR_H_
#define CAUCHYMOVEGENERATOR_H_

#include <random>
#include <cmath>
#include <curand_kernel.h>

#include "simulation/MoveGenerator.h"
#include "utils/CudaDefines.h"


#if CUDA_HOST_COMPILATION

/**
 * @brief Generates moves on CPU according to Cauchy distribution in radius and uniform distribution in angle.
 */
class CauchyMoveGenerator : public MoveGenerator {
private:
    std::mt19937 randomGenerator;
    std::cauchy_distribution<float> cauchyDistribution;
    std::uniform_real_distribution<float> uniformAngleDistribution;

public:
    /**
     * @brief Initializes the generators using seeds generated by byte generator seeded with @a seed parameter
     *
     * @param width the width parameter in Cauchy distribution
     * @param integrationStep the integration step in the diffusion used to rescale the distribution properly - in this
     * case by square root of the integration step
     * @param seed the random seed for generators
     */
    CauchyMoveGenerator(float width, float integrationStep, unsigned int seed);

    /**
     * @brief Generates random move on CPU according to Cauchy distribution in radius and uniform distribution in angle.
     *
     * @return random move according to Cauchy distribution in radius and uniform distribution in angle
     */
    CUDA_HOSTDEV Move generateMove() override;
};

#else // CUDA_DEVICE_COMPILATION

/**
 * @brief A `__device__` class generating moves on GPU according to Cauchy distribution in radius and uniform
 * distribution in angle.
 */
class CauchyMoveGenerator : public MoveGenerator {
private:
    float width;
    curandState *states;
    size_t numberOfTrajectories;

    CUDA_HOSTDEV float randomCauchy();

public:
    /**
     * @brief Initializes the generators using seeds generated by byte generator seeded with @a seed parameter.
     *
     * The constructor is expected to be called only by the first CUDA thread.
     *
     * @param width the width parameter in Cauchy distribution
     * @param integrationStep the integration step in the diffusion used to rescale the distribution properly - in this
     * case by square root of the integration step
     * @param seed the random seed for generators
     * @param numberOfTrajectories the number of trajectories for which independent number will be sampled on GPU
     */
    CUDA_HOSTDEV CauchyMoveGenerator(float width, float integrationStep, unsigned int seed, size_t numberOfTrajectories);

    CUDA_HOSTDEV CauchyMoveGenerator(const CauchyMoveGenerator &other) = delete;
    CUDA_HOSTDEV CauchyMoveGenerator operator=(CauchyMoveGenerator other) = delete;

    /**
     * @brief The destructor which is expected to be called only in the first CUDA thread.
     */
    CUDA_HOSTDEV ~CauchyMoveGenerator();

    /**
     * @brief Generates random move on CPU according to Cauchy distribution in radius and uniform distribution in angle.
     *
     * It respects the id of CUDA thread and for each thread the sequences are independent.
     *
     * @return random move according to Cauchy distribution in radius and uniform distribution in angle
     */
    CUDA_HOSTDEV Move generateMove() override;
};

#endif // Choice between cuda device and host compilation

#endif /* CAUCHYMOVEGENERATOR_H_ */

