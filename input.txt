# Number of steps in a single trajectory, not including starting point

numberOfSteps = 10000


# The radius of a tracer 

tracerRadius = 2


# Distribution to sample steps from; available: GaussianMoveGenerator (sigma); CauchyMoveGenerator (gamma)

moveGenerator = GaussianMoveGenerator 3   


# Filter accepting sampled moves; available:
# 1. ImageMoveFilter (image) PeriodicBoundaryConditions|WallBoundaryConditions
#        Creates available points map from (image) - pixels with (r+g+b)/3 >= 128 are available, other not. The move
#        is accepted if the spherocylinder drawn by moving tracer disk on the image does not contain unavailable
#        pixels.
#        The last argument defines boundary conditions on the edges of the image.
# 2. DefaultMoveFilter
#        Accepts every move.
# Multiple MoveFilters can be passed split by ;. There will be independent simulation based on the rest of
# parameters performed, allowing for example to average reuslting mean swuare displacement data over different
# images.

moveFilter = ImageMoveFilter sample_images/fibrinogen.ppm PeriodicBoundaryConditions


# The increment of time in each iteration. The move generator lenght scale and drift will be altered accordingly, and
# integration step equal 1 means no rescaling

integrationStep = 1


# Constant drift to be added to each sampled move. Available formats: xy (x) (y); rt (radius) (angle in degrees)

drift = rt 1 180


# Number of walks to be performed in a single series. They have to fit into video memory/RAM and will be performed
# in parallel. After that, they will be added to mean square displacement data, optionally stored and deleted.

numberOfWalksInSeries = 500


# Number of series to be peformed. This enables to run more trajectories than can fit to memory. Total number of
# walks is then
#    (number of simulations based on movefilter) * (number of series) * (number of walks in series)

numberOfSeries = 2


# If greater than 1, each trajectory will be split into that many parts. That parts will be run in separate random
# walk (of course in parallel numberOfWalksInSeries times). It can be used to generate longer trajectories on GPU
# with the same numberOfWalksInSeries without running out of memory

numberOfSplits = 1


# If true, trajectories after single series run will be stored in files with names:
#    (output prefix)_(index of simulation)_(index of trajectory)
# (index of trajectory) is calculated as:
#    (index of series) * (number of walks in series) + (index of trajectory in a single series)

storeTrajectories = false


# Random generator seed to be used. "random" can be used to choose it randomly

seed = random


# Device to simulate on. Can be one of: cpu, gpu. For gpu, there is an optional second argument - heap size in bytes.
# It can be used if images are large and cannot fit in GPU heap of default size.

device = gpu


# When specified, for each given step the x, y will be dumped to file (output prefix)_histogram_(step).txt

positionHistogramSteps = 10 100
