/*
 * GaussianMoveGenerator.h
 *
 *  Created on: 29 lip 2019
 *      Author: pkua
 */

#ifndef GAUSSIANMOVEGENERATOR_H_
#define GAUSSIANMOVEGENERATOR_H_

#include <random>
#include <curand_kernel.h>

#include "simulation/MoveGenerator.h"
#include "utils/CudaDefines.h"


/**
 * @brief A `__host__ __device__` class generating moves according to normal distribution in radius and uniform
 * distribution in angle.
 */
class GaussianMoveGenerator : public MoveGenerator {
private:

size_t numberOfTrajectories;

#if CUDA_HOST_COMPILATION
    std::mt19937 randomGenerator;
    std::normal_distribution<float> normalDistribution;
#else // CUDA_DEVICE_COMPILATION
    float sigma;
    curandState *states;
#endif

public:

    /**
     * @brief A `__host__ __device__` constructor, which initializes the generators using seeds generated by byte
     * generator seeded with @a seed parameter
     *
     * On GPU, the constructor is expected to be called only by the first CUDA thread.
     *
     * @param sigma the standard deviation in normal distribution
     * @param integrationStep the integration step in the diffusion used to rescale the distribution properly - in
     * this case by square root of the integration step
     * @param seed the random seed for generators
     * @param numberOfTrajectories the number of trajectories for which independent number will be sampled on GPU
     */
    CUDA_HOSTDEV GaussianMoveGenerator(float sigma, float integrationStep, unsigned int seed,
                                       size_t numberOfTrajectories);

    CUDA_HOSTDEV GaussianMoveGenerator(const GaussianMoveGenerator &other) = delete;
    CUDA_HOSTDEV GaussianMoveGenerator operator=(GaussianMoveGenerator other) = delete;

    /**
     * @brief The destructor which is expected to be called only in the first CUDA thread. On CPU it does nothing.
     */
    CUDA_HOSTDEV ~GaussianMoveGenerator();

    /**
     * @brief Generates random move according to normal distribution in radius and uniform distribution in angle.
     *
     * On GPU, it respects the id of CUDA thread and for each thread the sequences are independent.
     *
     * @return random move according to Cauchy distribution in radius and uniform distribution in angle
     */
    CUDA_HOSTDEV Move generateMove() override;
};

#endif /* GAUSSIANMOVEGENERATOR_H_ */
